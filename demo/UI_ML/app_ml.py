import streamlit as st
import sys 
sys.path.append(r"D:\Progamming\Progamming_courses\Quorsk\project\scr_ml")
from models import MBTIClassifierML

# ==============================
# Load model
# ==============================
model = MBTIClassifierML.load(r"D:\Progamming\Progamming_courses\Quorsk\project\reports\mbti_ml.pkl")

# ==============================
# H√†m √°nh x·∫° MBTI -> vai tr√≤ trong team
# ==============================
def mbti_to_team_role(mbti_type: str) -> str:
    mbti_type = mbti_type.upper()
    mapping = {
        "ENTJ": "Team Leader - ƒë·ªãnh h∆∞·ªõng, quy·∫øt ƒëo√°n",
        "ENFJ": "Coach - truy·ªÅn c·∫£m h·ª©ng, h·ªó tr·ª£ th√†nh vi√™n",
        "INTJ": "Strategist - ng∆∞·ªùi ho·∫°ch ƒë·ªãnh chi·∫øn l∆∞·ª£c",
        "INFJ": "Visionary - ng∆∞·ªùi ƒë·ªãnh h∆∞·ªõng t·∫ßm nh√¨n",
        "ENTP": "Innovator - s√°ng t·∫°o, ƒë∆∞a ra √Ω t∆∞·ªüng m·ªõi",
        "ENFP": "Motivator - kh√≠ch l·ªá, g·∫Øn k·∫øt ƒë·ªôi nh√≥m",
        "INTP": "Analyst - ph√¢n t√≠ch d·ªØ li·ªáu, logic",
        "INFP": "Mediator - ƒëi·ªÅu ho√† m·ªëi quan h·ªá trong team",
        "ESTJ": "Organizer - qu·∫£n l√Ω c√¥ng vi·ªác, deadline",
        "ESFJ": "Supporter - chƒÉm lo, k·∫øt n·ªëi m·ªçi ng∆∞·ªùi",
        "ISTJ": "Executor - th·ª±c hi·ªán chi ti·∫øt, k·ª∑ lu·∫≠t",
        "ISFJ": "Protector - b·∫£o v·ªá, h·ªó tr·ª£ h·∫≠u c·∫ßn",
        "ESTP": "Problem-solver - x·ª≠ l√Ω t√¨nh hu·ªëng nhanh",
        "ESFP": "Entertainer - t·∫°o nƒÉng l∆∞·ª£ng, g·∫Øn k·∫øt",
        "ISTP": "Tinkerer - gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ k·ªπ thu·∫≠t",
        "ISFP": "Artist - mang l·∫°i s·ª± s√°ng t·∫°o, th·∫©m m·ªπ"
    }
    return mapping.get(mbti_type, "Kh√¥ng r√µ vai tr√≤")

# ==============================
# Streamlit UI
# ==============================
st.title("üîÆ MBTI Personality Predictor")
st.write("Nh·∫≠p m·ªôt ƒëo·∫°n vƒÉn b·∫£n ƒë·ªÉ d·ª± ƒëo√°n lo·∫°i MBTI v√† vai tr√≤ trong team.")

user_input = st.text_area("‚úçÔ∏è Vi·∫øt v√†i c√¢u m√¥ t·∫£ b·∫£n th√¢n ho·∫∑c c√°ch b·∫°n l√†m vi·ªác trong nh√≥m:")

if st.button("D·ª± ƒëo√°n MBTI"):
    if user_input.strip():
        # D·ª± ƒëo√°n t·ª´ng tr·ª•c v√† gh√©p th√†nh MBTI
        X_tfidf = model.vectorizer.transform([user_input])
        axes = ["IE","NS","TF","JP"]
        mbti = ""
        for axis in axes:
            pred = model.classifiers[axis].predict(X_tfidf)[0]
            if axis == "IE":
                mbti += "I" if pred == 0 else "E"
            elif axis == "NS":
                mbti += "N" if pred == 0 else "S"
            elif axis == "TF":
                mbti += "T" if pred == 0 else "F"
            elif axis == "JP":
                mbti += "J" if pred == 0 else "P"

        role = mbti_to_team_role(mbti)

        st.subheader(f"üëâ MBTI d·ª± ƒëo√°n: **{mbti}**")
        st.success(f"üí° V·ªã tr√≠ ph√π h·ª£p trong team: {role}")
    else:
        st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p n·ªôi dung ƒë·ªÉ d·ª± ƒëo√°n.")
